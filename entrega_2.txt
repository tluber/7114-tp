# Modelo matemático

    - Variables constantes (son dato)
    CAPACIDAD: Importe maximo que puede llevar el camión.
    DIMENSION: Cantidad total de sucursales.
    Dij: Distancia entre las sucursales i y j. (i, j = {1, ..., DIMENSION})
    DEMi: Demanda de la sucursal i.

    - Variables enteras
    Ui: Orden en que se visita la sucursal i.
    CAPi: Capacidad del camión en la sucursal i.

    - Variables bivalentes
    Yij: Vale 1 si el camión va de la sucursal i a la sucursal j. Vale 0 si no.

    # Modelo

    - Salidas
    SUM (con j de 0 a DIMENSION) Yij = 1    para todo i de 1 a DIMENSION, con i ≠ j.

    - Llegadas
    SUM (con i de 0 a DIMENSION) Yij = 1    para todo j de 1 a DIMENSION, con i ≠ j.

    - Subtours
    Ui - Uj + DIMENSION * Yij <= DIMENSION - 1  para todo i,j de 1 a DIMENSION, con i ≠ j.

    - Capacidad
    CAP0 = 0
    0 <= CAPi <= CAPACIDAD  para todo i de 1 a DIMENSION.
    CAPi = CAPi-1 + DEMi    para todo i de 1 a DIMENSION.

    - Funcional
    Z(MIN) = SUM (con i de 0 a DIMENSION) SUM (con j de 0 a DIMENSION) Yij * Dij


# Ideas de resolución
    El problema sigue siendo el mismo, pero ahora pasamos a tener dimension mucho más grande que en la primera
    instancia.

# Comentarios por commit

    - Commit 968cc451f6bb0848047d50ecec913779a750bd11
        Tuve que hacer un rollback de la mejora que había hecho porque el algoritmo tardaba demasiado tiempo en
        encontrar la solución.


# Comentarios finales
